/* NameParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. NameParserTokenManager.java */
package demo;
import java.io.*;
import java.util.*;
import demo.Name;

/** Token Manager. */
@SuppressWarnings("unused")public class NameParserTokenManager implements NameParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000001fc00000L) != 0L)
         {
            jjmatchedKind = 45;
            return 62;
         }
         if ((active0 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 32;
            return 14;
         }
         if ((active0 & 0x7000002000L) != 0L)
         {
            jjmatchedKind = 62;
            return 35;
         }
         if ((active0 & 0x3e0000L) != 0L)
         {
            jjmatchedKind = 62;
            return 21;
         }
         if ((active0 & 0x1f0020000000L) != 0L)
         {
            jjmatchedKind = 45;
            return 132;
         }
         if ((active0 & 0x8800000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 33;
         }
         if ((active0 & 0x600000000L) != 0L)
         {
            jjmatchedKind = 45;
            return 77;
         }
         return -1;
      case 1:
         if ((active0 & 0x410000000L) != 0L)
            return 132;
         if ((active0 & 0x1f90203e2000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 33;
         }
         if ((active0 & 0xc0000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 1;
            }
            return 132;
         }
         if ((active0 & 0x68cfc00000L) != 0L)
            return 33;
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 96;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return 33;
         }
         if ((active0 & 0x401fd2293e2000L) != 0L)
            return 33;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 45;
               jjmatchedPos = 2;
            }
            return 132;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000000L) != 0L)
            return 33;
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
            return 33;
         }
         return -1;
      case 4:
         if ((active0 & 0x300000L) != 0L)
            return 33;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 5);
      case 50:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 51:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3e0000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc000001fc00000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc0000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7000002000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1f0000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 33);
         break;
      case 65:
      case 97:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0x71201020000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 67:
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 132);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 33);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000e040000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 73:
      case 105:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 132);
         return jjMoveStringLiteralDfa2_0(active0, 0x382000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 67:
      case 99:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 33);
         break;
      case 68:
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 47);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 132);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 33);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 33);
         break;
      case 76:
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 33);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 33);
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 33);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 33);
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x50000300000L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 33);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 33);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 33);
         break;
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000000000L);
      case 65:
      case 97:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 33);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x50000000000L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 33);
         break;
      case 73:
      case 105:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0xeL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xffffffff7f7fffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0x7fffffffffL, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 132;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
               case 33:
                  if ((0x608000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 21:
                  if ((0x608000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 14:
                  if ((0x608000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if (curChar == 39)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  break;
               case 77:
                  if ((0x608000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 0:
                  if ((0x608000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  else if ((0x84000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 40)
                     { jjCheckNAdd(31); }
                  else if (curChar == 34)
                     { jjCheckNAdd(25); }
                  if (curChar == 39)
                     { jjCheckNAdd(28); }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 62:
                  if ((0x608000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 132:
                  if ((0x608000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 35:
                  if ((0x608000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 2:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar != 46)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 17:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 24:
                  if (curChar == 34)
                     { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 26:
                  if (curChar == 34 && kind > 59)
                     kind = 59;
                  break;
               case 27:
                  if (curChar == 39)
                     { jjCheckNAdd(28); }
                  break;
               case 28:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 30:
                  if (curChar == 40)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 32:
                  if (curChar == 41 && kind > 61)
                     kind = 61;
                  break;
               case 36:
                  if (curChar == 46 && kind > 57)
                     kind = 57;
                  break;
               case 44:
                  if (curChar == 46 && kind > 56)
                     kind = 56;
                  break;
               case 46:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 55:
                  if (curChar == 46 && kind > 49)
                     kind = 49;
                  break;
               case 64:
                  if (curChar == 46 && kind > 16)
                     kind = 16;
                  break;
               case 69:
                  if (curChar == 46 && kind > 14)
                     kind = 14;
                  break;
               case 79:
                  if (curChar == 46 && kind > 8)
                     kind = 8;
                  break;
               case 86:
                  if (curChar == 46 && kind > 9)
                     kind = 9;
                  break;
               case 89:
                  if (curChar == 46 && kind > 10)
                     kind = 10;
                  break;
               case 93:
                  if (curChar == 46 && kind > 11)
                     kind = 11;
                  break;
               case 101:
                  if (curChar == 46 && kind > 12)
                     kind = 12;
                  break;
               case 106:
                  if (curChar == 46 && kind > 53)
                     kind = 53;
                  break;
               case 108:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 110:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 113:
                  if (curChar == 46 && kind > 15)
                     kind = 15;
                  break;
               case 118:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 122:
                  if (curChar == 46 && kind > 50)
                     kind = 50;
                  break;
               case 124:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 126:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(94); }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x140321801403218L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(15); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 77:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x140321801403218L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(15); }
                  }
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjstateSet[jjnewStateCnt++] = 93;
                  }
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  else if ((0x200000002000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAdd(101); }
                  }
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjstateSet[jjnewStateCnt++] = 79;
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x140321801403218L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(15); }
                  }
                  else if ((0x40000000400L & l) != 0L)
                     { jjAddStates(2, 5); }
                  else if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(6, 8); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(9, 10); }
                  else if ((0x2000000020L & l) != 0L)
                     { jjAddStates(11, 12); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(13, 14); }
                  else if ((0x400000004L & l) != 0L)
                     { jjAddStates(15, 16); }
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(17, 28); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(29, 30); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(31, 32); }
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjstateSet[jjnewStateCnt++] = 14;
                  }
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x140321801403218L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(15); }
                  }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjstateSet[jjnewStateCnt++] = 64;
                  }
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 132:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x140321801403218L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAdd(15); }
                  }
                  break;
               case 35:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(33); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjstateSet[jjnewStateCnt++] = 36;
                  }
                  break;
               case 1:
                  if ((0x400000004000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if ((0x400000004000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjAddStates(33, 34); }
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x140321801403218L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 18:
                  if ((0x400000004L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 19:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0x400000004L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 22:
                  if ((0x800000008L & l) != 0L && kind > 52)
                     kind = 52;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  { jjAddStates(35, 36); }
                  break;
               case 28:
                  { jjAddStates(37, 38); }
                  break;
               case 31:
                  { jjAddStates(39, 40); }
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 37:
                  if ((0x4000000040000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(31, 32); }
                  break;
               case 43:
                  if ((0x1000000010000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 45:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 49:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x2000000020000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 56:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 58:
                  if ((0x4000000040000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(9, 10); }
                  break;
               case 66:
                  if ((0x1000000010L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 67:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x200000002000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(17, 28); }
                  break;
               case 73:
                  if ((0x4000000040000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 80:
                  if ((0x8000000080000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 81:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x8000000080000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 87:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
                  if ((0x8000000080000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 90:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x8000000080000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 94:
                  if ((0x200000002000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 95:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 97:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 99:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(101); }
                  break;
               case 102:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 103:
                  if ((0x200000002000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(101); }
                  break;
               case 104:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x1000000010L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 107:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(6, 8); }
                  break;
               case 112:
                  if ((0x4000000040L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 114:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x1000000010L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 117:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 119:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x40000000400L & l) != 0L)
                     { jjAddStates(2, 5); }
                  break;
               case 121:
                  if ((0x1000000010L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 123:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 125:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 127:
                  if ((0x4000000040000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 128:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 77:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 62:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 132:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 35:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(33); }
                  break;
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(35, 36); }
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(37, 38); }
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(39, 40); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 132 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 18, 121, 124, 125, 131, 115, 117, 119, 67, 71, 53, 56, 35, 41, 21, 
   23, 77, 78, 84, 87, 91, 92, 97, 99, 102, 103, 104, 110, 62, 63, 43, 
   46, 4, 10, 25, 26, 28, 29, 31, 32, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\54", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public NameParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public NameParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 132; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[132];
    private final int[] jjstateSet = new int[2 * 132];

    
    protected char curChar;
}
