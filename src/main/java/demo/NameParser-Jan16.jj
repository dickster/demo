options
{
    LOOKAHEAD=4;
    FORCE_LA_CHECK=true;
    STATIC=false;
    IGNORE_CASE=true;
    USER_TOKEN_MANAGER=false;
    USER_CHAR_STREAM=false;
}


//TestData td[] = { new TestData("Henry \"Hank\" J. Fasthoff IV", "Henry", "\"Hank\" J.", "Fasthoff"),
//        new TestData("April A. (Caminez) Bentley", "April", "A. (Caminez)", "Bentley"),
//        new TestData("fff lll", "fff", "", "lll"),
//        new TestData("fff mmmmm lll", "fff", "mmmmm", "lll"),
//        new TestData("fff mmm1      mm2 lll", "fff", "mmm1 mm2", "lll"),
//        new TestData("Mr. Dr. Tom Jones", "Tom", "", "Jones"),
//        new TestData("Robert P. Bethea Jr.", "Robert", "P.", "Bethea"),
//        new TestData("Charles P. Adams, Jr.", "Charles", "P.", "Adams"),
//        new TestData("B. Herbert Boatner, Jr.", "B.", "Herbert", "Boatner"),
//        new TestData("Bernard H. Booth IV", "Bernard", "H.", "Booth"),
//        new TestData("F. Laurens \"Larry\" Brock", "F.", "Laurens \"Larry\"", "Brock"),
//        new TestData("Chris A. D'Amour", "Chris", "A.", "D'Amour") };

//        "md", "cpa" };
//        this.prefixes = Arrays.asList(
//        "bar", "ben", "bin", "da", "dal",
//        "de la", "de", "del", "der", "di", "ibn", "la", "le",
//        "san", "st", "ste", "van", "van der", "van den", "vel",
//        "von" );



PARSER_BEGIN(NameParser)
package demo;

import java.io.*;
import java.util.*;
import demo.Name;


public class NameParser {

    NameResult names;

    public NameParser() {
        this(new ByteArrayInputStream("".getBytes()));
    }

    // use this method...don't call parse() directly!
    // because need to re-init variables and reset input.
    public NameResult parseName(String text) throws ParseException, TokenMgrError {
        System.out.print("parsing..." + text + " : " + "\n  ");
        init();
        //text = normalizeForComma(text); // is it something like "Smith, Mr. John"?
        ReInit(new StringReader(text));
        _$$parse();
        return names.collate();
    }

    private String normalizeForComma(String text) {
        int index = text.indexOf(",");
        if (index==-1) return text;
        String t = text.substring(index+1) + " " + text.substring(0,index);
        System.out.println(" comma normalized " + text + " --> " + t);
        return t;
    }

    private void init() {
        names = new NameResult();
        names.push(new Name());
    }

    public Name getName() {
        return names.peek();
    }

}
PARSER_END(NameParser)

SKIP :
{
    " "
    | "\t"
    | "\r"
    | "\n"
}


TOKEN:
{
    <COMMA:","> |
    <AND:"+"|"&"|"'n"|"and"> |
    // prefixes......
    <HON:"hon"(".")?("orable")?> |
    <MR:"mister"|"mr"(".")?> |
    <MRS:"misses"|"mrs"(".")?> |
    <MISS:"miss"(".")?> |
    <MS:"ms"(".")?> |
    <MADAM:("madam"|"maam"|"mdm"(".")?|"mm"(".")?)> |
    <SIR:"sir"> |
    <ATTY:"atty"(".")?> |
    <PROF:"prof"(".")?> |
    <DOCTOR:"doctor"|"dr"(".")?> |
    // for compound last names....
    <BAR:"bar"> |
    <BEN:"ben"> |
    <BIN:"bin"> |
    <BINTI:"binti"> |
    <BINTE:"binte"> |
    <DA:"da"> |
    <DE:"de"> |
    <DAL:"dal"> |
    <DELA:"dela"> |
    <DE_LA:"de la"> |
    <DER:"der"> |
    <DI:"di"> |
    <IBN:"ibn"> |
    <LA:"la"> |
    <LE:"le"> |
    <L_APOST:"l"("'")?> |
    <MAC:"mac"> |
    <MC:"mc"> |
    <OH:"o'"> |
    <SAN:"san"> |
    <ST:"st"> |
    <STE:"ste"> |
    <THE:"the"> |
    <VAN_DER:"van der"> |
    <VAN:"van"> |
    <VAN_DEN:"van den"> |
    <VEL:"vel"> |
    <VON:"von"> |
    // suffixes
    <ROMAN_NUMERALS:(["m","c","d","l","i","x","v"])+> |
    <SECOND:"2nd"> |
    <THIRD:"3rd"> |
    <ESQ:"esquire"|"esq"(".")?> |
    <JD:"jd"|"j.d."> |
    <PHD:"phd"|"ph.d"> |
    <BSC:"b"(".")?"sc"> |
    <MD:"md"| "m.d."> |
    <CP:"cp"| "c.p."> |
    <SENIOR:"sr"(".")?|"senior"> |
    <JUNIOR:"jr"(".")?|"junior">
}
// TODO:refactor nick_name.
TOKEN : {
// TODO : allow for brackets around nickname.
    <QUOTED_NICK_NAME: "\"" (~["\""])+ "\"" > |
    <SINGLE_QUOTED_NICK_NAME: "'" (~["\""])+ "'" > |
    <PAREN_NICK_NAME: "(" (~[")"])+ ")" > |
// TODO : make sure i have all accent chars.
    <NAME : (["\u00e0"-"\u0466"]|
     ["a"-"z","-","'","."])+ >
}

void end() : {}
{
    (<EOF>) {names.peek().endParse();}
}

void _$$parse() : {}
{
    LOOKAHEAD(shortOrLongName() and())
       shortOrLongName() and() longName() end() |
       longName() end()
}

void shortOrLongName() : {}
{
    LOOKAHEAD(salutation())
        salutation() (name())* (relation())* |
        (longName())
}


void longName() : {}
{
    (salutation())* (name())+ (relation())*
}

void and() : {} {
    (<AND>)  {
        names.peek().endParse();
        names.push(new Name());
    }
}

void salutation() : {}
{
    (<HON>|<MR>|<MRS>|<MISS>|<MS>|<SIR>|<MADAM>|<ATTY>|<DOCTOR>|<PROF>)
     {getName().addSalutation(token.image);}
}

void relation() : {} {
// TODO : allow for commas.  e.g. Joe blow, PHd, B.Sc
    (<SECOND>|<THIRD>|<ESQ>|<JD>|<BSC>|<PHD>|<SENIOR>|<JUNIOR>|<ROMAN_NUMERALS>) {getName().addRelation(token.image);}
}

void name() : {}
{
    nickName() |
    (namePrefix())? nameRoot()
}

void nameRoot() : {}
{
    (<NAME>) { getName().add(token.image); }
}

void namePrefix() : {}
{
    (<BAR>|<BEN>|<BIN>|<BINTI>|<BINTE>|<DA>|<DAL>|<DE>|<DELA>|<DE_LA>|<DER>|<DI>|<IBN>|<LA>|<L_APOST>|<LE>|<MAC>|<MC>|<OH>|<SAN>|<ST>|<STE>|<THE>|<VAN_DER>|<VAN>|<VAN_DEN>|<VEL>|<VON>)
        { getName().pushPrefix(token.image); }
}


void nickName() : {}
{
    (<SINGLE_QUOTED_NICK_NAME>|<QUOTED_NICK_NAME>|<PAREN_NICK_NAME>) { getName().addNickName(token.image); }
}




