Index: src/main/java/demo/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/Address.java	(revision )
+++ src/main/java/demo/Address.java	(revision )
@@ -0,0 +1,80 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+package demo;
+
+import java.io.Serializable;
+
+public class Address implements Serializable {
+
+    private String streetAddress = "";
+    private String city = "";
+    private String province = "";
+    private String country = "";
+    private String postalCode = "";
+    private GpsLocation gpsLocation;
+    private String formattedAddress;
+
+    public Address() {
+
+    }
+
+    public String getStreetAddress() {
+        return streetAddress;
+    }
+
+    public void setStreetAddress(String streetAddress) {
+        this.streetAddress = streetAddress;
+    }
+
+    public String getCity() {
+        return city;
+    }
+
+    public void setCity(String city) {
+        this.city = city;
+    }
+
+    public String getProvince() {
+        return province;
+    }
+
+    public void setProvince(String province) {
+        this.province = province;
+    }
+
+    public String getCountry() {
+        return country;
+    }
+
+    public void setCountry(String country) {
+        this.country = country;
+    }
+
+    public String getPostalCode() {
+        return postalCode;
+    }
+
+    public void setPostalCode(String postalCode) {
+        this.postalCode = postalCode;
+    }
+
+    public GpsLocation getGpsLocation() {
+        return gpsLocation;
+    }
+
+    public void setGpsLocation(GpsLocation gpsLocation) {
+        this.gpsLocation = gpsLocation;
+    }
+
+    public String getFormattedAddress() {
+        return formattedAddress;
+    }
+
+    public void setFormattedAddress(String formattedAddress) {
+        this.formattedAddress = formattedAddress;
+    }
+}
Index: src/main/java/demo/EasyAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/EasyAddress.java	(revision )
+++ src/main/java/demo/EasyAddress.java	(revision )
@@ -0,0 +1,98 @@
+package demo;
+
+import com.google.gson.GsonBuilder;
+import org.apache.wicket.RuntimeConfigurationType;
+import org.apache.wicket.markup.head.IHeaderResponse;
+import org.apache.wicket.markup.head.JavaScriptHeaderItem;
+import org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem;
+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;
+import org.apache.wicket.markup.html.form.HiddenField;
+import org.apache.wicket.markup.html.form.ILabelProvider;
+import org.apache.wicket.markup.html.form.TextField;
+import org.apache.wicket.markup.html.panel.Panel;
+import org.apache.wicket.model.IModel;
+import org.apache.wicket.model.Model;
+import org.apache.wicket.model.PropertyModel;
+import org.apache.wicket.request.resource.JavaScriptResourceReference;
+import org.apache.wicket.request.resource.ResourceReference;
+
+import java.math.BigDecimal;
+
+public class EasyAddress extends Panel implements ILabelProvider<String> {
+
+    private static final String GOOGLE_MAPS_URL = "https://maps.googleapis.com/maps/api/js?sensor=false";
+    private static final String CREATE_ADDRESS_JS = "easy.address.create(%s);";
+    private static ResourceReference ADDRESS_JS = new JavaScriptResourceReference(EasyAddress.class, "address.js");
+    
+    private IModel<Address> model;
+    private final TextField<String> text;
+    private GpsLocation location;
+
+    public EasyAddress(String id, IModel<Address> model) {
+        super(id, model);
+        this.model = model;
+        setOutputMarkupId(true);
+        
+        // the wicket id's chosen here are chosen to reflect the json properties that are returned by the GoogleMaps API.
+        // to help understand the javascript binding better.
+        // see https://developers.google.com/maps/documentation/geocoding/#ReverseGeocoding
+        add(new HiddenField<String>("administrative_area_level_1", new PropertyModel(model, "province")));
+        add(new HiddenField<String>("locality", new PropertyModel(model, "city")));
+        add(new HiddenField<String>("street_address", new PropertyModel(model, "streetAddress")));
+        add(new HiddenField<String>("postal_code", new PropertyModel(model, "postalCode")));
+            
+        add(text = new TextField<String>("text", new PropertyModel(model, "formattedAddress")));
+        add(new HiddenField<BigDecimal>("latitude", new PropertyModel(model, "gpsLocation.latitude")));
+        add(new HiddenField<BigDecimal>("longitude", new PropertyModel(model, "gpsLocation.latitude")));
+        add(new HiddenField<String>("country", new PropertyModel(model, "country")));
+    }
+
+    @Override
+    public void renderHead(IHeaderResponse response) {
+        super.renderHead(response);
+        response.render(JavaScriptHeaderItem.forUrl(GOOGLE_MAPS_URL));
+        response.render(JavaScriptReferenceHeaderItem.forReference(ADDRESS_JS));
+        response.render(OnDomReadyHeaderItem.forScript(String.format(CREATE_ADDRESS_JS, new GsonBuilder().create().toJson(getOptions()))));
+    }
+
+    protected Object getOptions() {
+        return new Options();
+    }
+
+    @Override
+    public IModel<String> getLabel() {
+        return Model.of("address");
+    }
+
+    @Override
+    public boolean isVisible() {
+        if (super.isVisible()) {
+            return get("text").isVisible();
+        }
+        return false;
+    }
+
+    public EasyAddress setRequired(boolean required) {
+        text.setRequired(required);
+        return this;
+    }
+
+    public class Options {
+        String id = "#"+EasyAddress.this.getMarkupId();
+        Double latitude;
+        Double longitude;
+
+        Options() {
+            if (EasyAddress.this.getApplication().getConfigurationType().equals(RuntimeConfigurationType.DEVELOPMENT) && location==null) {
+                location = new GpsLocation(43.650713, -79.377683);
+                }
+            if (location!=null) {
+                latitude = location.getLatitude().doubleValue();
+                longitude = location.getLongitude().doubleValue();
+            }
+        }
+
+    }
+
+
+}
Index: src/main/java/demo/EasyTabbedPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/EasyTabbedPanel.java	(revision )
+++ src/main/java/demo/EasyTabbedPanel.java	(revision )
@@ -0,0 +1,204 @@
+package demo;
+
+
+import com.google.gson.Gson;
+import org.apache.wicket.Application;
+import org.apache.wicket.Component;
+import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.ajax.markup.html.AjaxLink;
+import org.apache.wicket.markup.head.*;
+import org.apache.wicket.markup.html.WebMarkupContainer;
+import org.apache.wicket.markup.html.basic.Label;
+import org.apache.wicket.markup.html.list.Loop;
+import org.apache.wicket.markup.html.list.LoopItem;
+import org.apache.wicket.markup.html.panel.Panel;
+import org.apache.wicket.model.AbstractReadOnlyModel;
+import org.apache.wicket.model.IModel;
+import org.apache.wicket.model.Model;
+import org.apache.wicket.request.resource.CssResourceReference;
+import org.apache.wicket.request.resource.JavaScriptResourceReference;
+
+import java.io.Serializable;
+import java.util.List;
+
+
+public abstract class EasyTabbedPanel<T extends Tab<?>> extends Panel {
+
+    private static final String TAB_PANEL_ID = "panel";
+    private static final String SELECT_LAST_TAB_JS = "$('#%s').tabPanel.selectLastTab()";
+    private static final String BLANK_SLATE_ID = "blankSlate";
+    private static final String TAB_PANEL_INIT = "easy.tabPanel.init(%s)";
+
+    private final JavaScriptHeaderItem TAB_PANEL_JS = JavaScriptReferenceHeaderItem.forReference(new JavaScriptResourceReference(EasyTabbedPanel.class, "easyTabbedPanel.js"));
+    private final CssHeaderItem TAB_PANEL_CSS = CssHeaderItem.forReference(new CssResourceReference(EasyTabbedPanel.class,"easyTabbedPanel.css"));
+
+    private T currentTab = null;
+    private Model<String> header;
+    private List<T> tabs;
+
+    public EasyTabbedPanel(final String id, final List<T> data, Model<String> header) {
+        super(id);
+        setOutputMarkupId(true);
+        this.header = header;
+        this.tabs = data;
+        currentTab = tabs.size()==0 ? null: tabs.get(0);
+    }
+
+    private WebMarkupContainer createBlankSlate(String id) {
+        return new WebMarkupContainer(id);
+    }
+
+    @Override
+    protected void onInitialize() {
+        super.onInitialize();
+        final IModel<Integer> tabCount = new AbstractReadOnlyModel<Integer>() {
+            @Override public Integer getObject() {
+                return EasyTabbedPanel.this.tabs.size();
+            }
+        };
+
+        WebMarkupContainer tabsContainer = new WebMarkupContainer("tabsContainer");
+        add(tabsContainer);
+        tabsContainer.add(new Label("header", getHeaderModel()));
+        tabsContainer.add(new AjaxLink("add") {
+            @Override public void onClick(AjaxRequestTarget target) {
+                addTab(target);
+            }
+        });
+
+        tabsContainer.add(new Loop("tabs", tabCount) {
+            @Override protected void populateItem(final LoopItem item) {
+                final int index = item.getIndex();
+                final Tab tab = EasyTabbedPanel.this.tabs.get(index);
+                final WebMarkupContainer titleLink = new WebMarkupContainer("link");
+                titleLink.add(newTitle("title", tab.getTitle(), index));
+                item.add(titleLink);
+                item.add(newDeleteButton("delete", item.getIndex()));
+            }
+
+            @Override
+            protected LoopItem newItem(final int iteration) {
+                return newTabContainer(iteration);
+            }
+        });
+
+        WebMarkupContainer panelContainer = new WebMarkupContainer("panelContainer");
+        add(panelContainer);
+
+        panelContainer.add(new Loop("panels", tabCount) {
+            @Override protected void populateItem(final LoopItem item) {
+                final int index = item.getIndex();
+                final Tab tab = EasyTabbedPanel.this.tabs.get(index);
+                item.add(tab.createPanel(TAB_PANEL_ID));
+                item.setRenderBodyOnly(true);
+            }
+
+            @Override
+            protected LoopItem newItem(final int iteration) {
+                return newTabContainer(iteration);
+            }
+        });
+
+        panelContainer.add(createBlankSlate(BLANK_SLATE_ID));
+    }
+
+    protected void addTab(AjaxRequestTarget target) {
+        tabs.add(currentTab = createNewTab());
+//        target.appendJavaScript(String.format(SELECT_LAST_TAB_JS, getOutputMarkupId()));
+        target.add(EasyTabbedPanel.this);
+    }
+
+    protected abstract T createNewTab();
+
+    private Component newDeleteButton(String id, final int index) {
+        return new AjaxLink(id) {
+            @Override public boolean isVisible() {
+                return tabs.size()>1 || !isMandatory();   // if tab is last one and it's a mandatory field then don't show this button.  e.g. can't delete only driver. (but you can delete only conviction).
+            }
+            @Override public void onClick(AjaxRequestTarget target) {
+                deleteTab(target, index);
+                target.add(EasyTabbedPanel.this);
+            }
+        };
+    }
+
+    protected void deleteTab(AjaxRequestTarget target, int index) {
+        tabs.remove(tabs.get(index));
+        currentTab = tabs.size()==0 ? null : tabs.get(Math.min(index, tabs.size() - 1));
+    }
+
+    private T getCurrentTab() {
+        return currentTab;
+    }
+
+    protected boolean isMandatory() {
+        return true;
+    }
+
+    @Override
+    protected IModel<?> initModel() {
+        return new Model<Integer>(-1);
+    }
+
+    protected LoopItem newTabContainer(final int index) {
+        return new LoopItem(index);
+    }
+
+    @Override
+    protected void onBeforeRender() {
+        super.onBeforeRender();
+    }
+
+    @Override
+    public void renderHead(IHeaderResponse response) {
+        super.renderHead(response);
+        response.render(TAB_PANEL_JS);
+        response.render(TAB_PANEL_CSS);
+        response.render(OnDomReadyHeaderItem.forScript(String.format(TAB_PANEL_INIT, new Gson().toJson(getOptions()))));
+        response.render(JavaScriptHeaderItem.forReference(Application.get().getJavaScriptLibrarySettings().getJQueryReference()));
+    }
+
+    protected Object getOptions() {
+        return new EasyTabbedPanelOptions();
+    }
+
+    protected Component newTitle(final String titleId, final String title, final int index) {
+        return new Label(titleId, title);
+    }
+
+    protected WebMarkupContainer newTabLink(final String linkId, final int index) {
+        return new AjaxLink<Void>(linkId) {
+            @Override public void onClick(AjaxRequestTarget target) {
+                target.add(EasyTabbedPanel.this);
+            }
+        };
+    }
+
+    public IModel<String> getHeaderModel() {
+        return new Model<String>() {
+            @Override public String getObject() {
+                int tabCount = tabs.size();
+                return String.format("%s%s",header.getObject(),(tabCount>1 ? " ("+tabCount+")" : ""));
+            }
+        };
+    }
+
+    // ---------------------------------------------------------------
+
+    public class EasyTabbedPanelOptions implements Serializable {
+        // TODO : refactor this into generic json options object (map).
+        String id = EasyTabbedPanel.this.getMarkupId();
+        Boolean mandatory = isMandatory();
+        Boolean collapsed;
+        String minTabSize = "150px";
+        Boolean tooltipOnAdd;
+        int current = tabs.indexOf(getCurrentTab());
+        HeaderOptions header = new HeaderOptions();
+    }
+
+    public class HeaderOptions implements Serializable {
+        String minWidth = "7em";
+        String maxWidth = "10em";
+    }
+
+}
Index: src/main/java/demo/Tab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/Tab.java	(revision )
+++ src/main/java/demo/Tab.java	(revision )
@@ -0,0 +1,33 @@
+package demo;
+
+
+import org.apache.wicket.ajax.form.AjaxFormValidatingBehavior;
+import org.apache.wicket.markup.html.WebMarkupContainer;
+import org.apache.wicket.markup.html.form.Form;
+import org.apache.wicket.model.IModel;
+import org.apache.wicket.model.Model;
+import org.apache.wicket.util.visit.IVisit;
+import org.apache.wicket.util.visit.IVisitor;
+
+import javax.swing.text.html.FormSubmitEvent;
+import java.io.Serializable;
+
+public abstract class Tab<T extends Serializable> implements Serializable {
+
+    protected IModel<T> model;
+    protected WebMarkupContainer panel;
+    private transient boolean current = false;
+    private String panelId;
+
+    public Tab(T value) {
+        this.model = Model.of(value);
+    }
+
+    public String getTitle() {
+        // not null safe. typically you will implement this yourself.
+        return model.getObject().toString();
+    }
+
+    protected abstract WebMarkupContainer createPanel(String id);
+
+}
Index: src/test/java/demo/TestHomePage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/demo/TestHomePage.java	(revision )
+++ src/test/java/demo/TestHomePage.java	(revision )
@@ -0,0 +1,29 @@
+package demo;
+
+import junit.framework.TestCase;
+import org.apache.wicket.util.tester.WicketTester;
+
+/**
+ * Simple test using the WicketTester
+ */
+public class TestHomePage extends TestCase
+{
+	private WicketTester tester;
+
+	public void setUp()
+	{
+		tester = new WicketTester();
+	}
+
+	public void testRenderMyPage()
+	{
+		//start and render the test page
+		tester.startPage(HomePage.class);
+
+		//assert rendered page class
+		tester.assertRenderedPage(HomePage.class);
+
+		//assert rendered label component
+		tester.assertLabel("message", "If you see this message wicket is properly configured and running");
+	}
+}
Index: src/main/java/demo/WicketApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/WicketApplication.java	(revision )
+++ src/main/java/demo/WicketApplication.java	(revision )
@@ -0,0 +1,16 @@
+package demo;
+
+import org.apache.wicket.protocol.http.WebApplication;
+
+public class WicketApplication extends WebApplication {
+
+    public WicketApplication() {
+        super();
+    }
+
+
+    public Class getHomePage() {
+        return HomePage.class;
+    }
+
+}
Index: src/main/java/demo/HomePage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/HomePage.java	(revision )
+++ src/main/java/demo/HomePage.java	(revision )
@@ -0,0 +1,74 @@
+package demo;
+
+import com.google.common.collect.Lists;
+import demo.resources.Resource;
+import org.apache.wicket.markup.head.CssHeaderItem;
+import org.apache.wicket.markup.head.IHeaderResponse;
+import org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem;
+import org.apache.wicket.markup.html.WebMarkupContainer;
+import org.apache.wicket.markup.html.basic.Label;
+import org.apache.wicket.markup.html.WebPage;
+import org.apache.wicket.markup.html.form.Form;
+import org.apache.wicket.markup.html.form.TextField;
+import org.apache.wicket.markup.html.panel.Fragment;
+import org.apache.wicket.model.Model;
+import org.apache.wicket.model.PropertyModel;
+import org.apache.wicket.request.mapper.parameter.PageParameters;
+import org.apache.wicket.request.resource.CssResourceReference;
+import org.apache.wicket.request.resource.JavaScriptResourceReference;
+
+import java.util.List;
+
+public class HomePage extends WebPage {
+
+    private static final JavaScriptResourceReference BOOTSTRAP_JS = new JavaScriptResourceReference(Resource.class, "bootstrap-3.1.1-dist/js/bootstrap.min.js");
+    private static final CssResourceReference BOOTSTRAP_CSS = new CssResourceReference(Resource.class, "bootstrap-3.1.1-dist/css/bootstrap.min.css");
+    private static final JavaScriptResourceReference JQUERY_UI_JS = new JavaScriptResourceReference(Resource.class, "jquery-ui-1.10.4.custom/js/jquery-ui-1.10.4.custom.js");
+    private static final CssResourceReference JQUERY_UI_CSS = new CssResourceReference(Resource.class, "jquery-ui-1.10.4.custom/css/ui-lightness/jquery-ui-1.10.4.custom.min.css");
+
+
+
+    public HomePage(final PageParameters parameters) {
+        List<DemoTab> tabs = Lists.newArrayList(
+                new DemoTab("Petroslav Kablowskisapalbhaala"),
+                new DemoTab("Derek Dick"),
+                new DemoTab("John D'oh")
+                );
+        add(new Form("form").
+            add(new EasyTabbedPanel<DemoTab>("tabs", tabs, Model.of("Insured")) {
+                @Override
+                protected DemoTab createNewTab() {
+                    return new DemoTab("New Person");
+                }
+            }));
+    }
+
+    @Override
+    public void renderHead(IHeaderResponse response) {
+        response.render(JavaScriptReferenceHeaderItem.forReference(JQUERY_UI_JS));
+        response.render(JavaScriptReferenceHeaderItem.forReference(BOOTSTRAP_JS));
+        response.render(CssHeaderItem.forReference(BOOTSTRAP_CSS));
+        response.render(CssHeaderItem.forReference(JQUERY_UI_CSS));
+    }
+
+
+
+    class DemoTab extends Tab<String> {
+
+        private Address address;
+
+        public DemoTab(String value) {
+            super(value);
+        }
+
+        @Override
+        protected WebMarkupContainer createPanel(String id) {
+            Fragment c = new Fragment(id, "panelFragment", HomePage.this);
+            c.add(new Label("label","Name"));
+            c.add(new TextField("text",model));
+            c.add(new EasyAddress("address", new PropertyModel<Address>(this, "address")));
+            return c;
+        }
+
+    }
+}
Index: src/main/java/demo/easyTabbedPanel.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/easyTabbedPanel.css	(revision )
+++ src/main/java/demo/easyTabbedPanel.css	(revision )
@@ -0,0 +1,215 @@
+body {
+    font-family: sans-serif;
+    color:#333;
+}
+
+.tab-row {
+    /*only have border when in expanded mode.*/
+    border-bottom:1px solid #888;
+    background: #f0f0f0;
+    width: 100%;
+    display: block;
+    height:40px;
+    line-height:40px;
+}
+
+.tab-row ul {
+    float:left;
+    display: block;
+    padding-left:0px;
+    list-style-type: none;
+    margin: 0;
+}
+
+.tab-row ul>li {
+    border-radius:8px 8px 0 0;
+    margin-top:1px;
+    height:100%;
+    position:relative;
+    display: inline-block;
+    border-top: 1px solid #aaa;
+    border-right: 1px solid #aaa;
+    border-bottom: 1px solid #aaa;
+    padding-left:5px;
+    padding-right:5px;
+}
+
+.tab-row>a {
+    text-decoration: none;
+    color:#333;
+}
+
+.tab-row ul .tab-name {
+    float:left;
+    max-width:90%;
+    width:95%;
+    text-decoration: none;
+    display:inline-block;
+    text-overflow: ellipsis;
+    overflow:hidden;
+    white-space:nowrap;
+    color:#669;
+}
+
+.tab-row ul li:hover {
+    text-shadow: 0 0 2px #fea;
+    color:#33c;
+    border-top-width: 2px;
+    border-top-color: cornflowerblue;
+    background: -moz-linear-gradient(top, rgba(226,226,226,1) 0%, rgba(224,224,224,1) 0%, rgba(242,242,242,1) 51%, rgba(254,254,254,1) 100%); /* FF3.6+ */
+    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(226,226,226,1)), color-stop(0%,rgba(224,224,224,1)), color-stop(51%,rgba(242,242,242,1)), color-stop(100%,rgba(254,254,254,1))); /* Chrome,Safari4+ */
+    background: -webkit-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* Chrome10+,Safari5.1+ */
+    background: -o-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* Opera 11.10+ */
+    background: -ms-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* IE10+ */
+    background: linear-gradient(to bottom, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* W3C */
+}
+
+.tab-row ul>li.current {
+    /*same colour as background of panel below.*/
+    border-bottom:1px solid white;
+    background: -moz-linear-gradient(top, rgba(226,226,226,1) 0%, rgba(224,224,224,1) 0%, rgba(242,242,242,1) 51%, rgba(254,254,254,1) 100%); /* FF3.6+ */
+    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(226,226,226,1)), color-stop(0%,rgba(224,224,224,1)), color-stop(51%,rgba(242,242,242,1)), color-stop(100%,rgba(254,254,254,1))); /* Chrome,Safari4+ */
+    background: -webkit-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* Chrome10+,Safari5.1+ */
+    background: -o-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* Opera 11.10+ */
+    background: -ms-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* IE10+ */
+    background: linear-gradient(to bottom, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* W3C */
+}
+.tab-row ul>li.current a {
+    color:#333;
+}
+
+.tab-row ul>li.tab-mandatory {
+    border:0px;
+}
+
+.tab-row ul>li.tab-mandatory a {
+    cursor:default;
+}
+
+
+.tab-row ul>li.tab-mandatory .tab-top {
+    display:none;
+}
+.tab-row .tab-add {
+    border-top: 1px solid #aaa;
+    border-right: 1px solid #aaa;
+    height: 29px;
+    margin: 10px 0 0 0;
+    border-radius: 0 8px 0 0;
+    padding-right: 15px;
+    padding-left: 18px;
+    float: left;
+    color:#338433;
+}
+
+
+
+.tab-row .tab-add i {
+    line-height:2;
+}
+
+.tab-row .tab-add:hover {
+    background: -moz-linear-gradient(top, rgba(226,226,226,1) 0%, rgba(224,224,224,1) 0%, rgba(242,242,242,1) 51%, rgba(254,254,254,1) 100%); /* FF3.6+ */
+    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(226,226,226,1)), color-stop(0%,rgba(224,224,224,1)), color-stop(51%,rgba(242,242,242,1)), color-stop(100%,rgba(254,254,254,1))); /* Chrome,Safari4+ */
+    background: -webkit-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* Chrome10+,Safari5.1+ */
+    background: -o-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* Opera 11.10+ */
+    background: -ms-linear-gradient(top, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* IE10+ */
+    background: linear-gradient(to bottom, rgba(226,226,226,1) 0%,rgba(224,224,224,1) 0%,rgba(242,242,242,1) 51%,rgba(254,254,254,1) 100%); /* W3C */
+}
+
+.tab-row .tab-x a i {
+    display:inline-block;
+    font-size:8pt;
+    color:#aaa;
+    float:right;
+    margin-top:2px;
+}
+
+.tab-row .tab-x:hover a i {
+    color:#880000;
+}
+
+/*.tab-row .tab-x:hover a i:before {*/
+    /*content: "\f09c";*/
+/*}*/
+
+div.content {
+    background: yellow;
+}
+
+.tab-row ul {
+    overflow: hidden;
+}
+.tab-row .tab-header {
+    font-size:12pt;
+    float:left;
+    margin-left:10px;
+}
+
+.tab-row .tab-header p {
+    display:inline;
+}
+
+.tab-row .tab-header:hover {
+    color:#44e;
+    text-decoration: underline;
+}
+
+.tab-row .tabs-expand-collapse {
+    padding-left:5px;
+    padding-right:5px;
+    float:left;
+}
+
+.tab-row .tabs-expand-collapse i {
+    line-height:2;
+}
+
+.tab-content {
+    padding:15px;
+    display:none;
+    top:0;
+    left:0;
+    float:left;
+    width:100%;
+}
+
+.tab-content.current {
+    display:block;
+}
+
+.tab-row li:first-of-type {
+    border-left:1px solid #aaa;
+}
+
+div.content {
+    clear: both;
+}
+.tab-panels {
+    position:relative;
+    overflow:hidden;
+    width:100%;
+}
+
+
+body {
+ font-size:14px;
+}
+
+
+
+/* page related....for demo purposes only.*/
+
+main {
+    margin-top:75px;
+}
+
+.col1 {
+    float:left;
+    width:100px;
+}
+
+.col2 {
+    margin-left:100px;
+}
+
Index: src/test/java/demo/Start.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/demo/Start.java	(revision )
+++ src/test/java/demo/Start.java	(revision )
@@ -0,0 +1,46 @@
+package demo;
+
+import org.mortbay.jetty.Connector;
+import org.mortbay.jetty.Server;
+import org.mortbay.jetty.bio.SocketConnector;
+import org.mortbay.jetty.webapp.WebAppContext;
+
+public class Start {
+
+	public static void main(String[] args) throws Exception {
+		Server server = new Server();
+		SocketConnector connector = new SocketConnector();
+		// Set some timeout options to make debugging easier.
+		connector.setMaxIdleTime(1000 * 60 * 60);
+		connector.setSoLingerTime(-1);
+		connector.setPort(8080);
+		server.setConnectors(new Connector[] { connector });
+
+		WebAppContext bb = new WebAppContext();
+		bb.setServer(server);
+		bb.setContextPath("/");
+		bb.setWar("src/main/webapp");
+
+		
+		// START JMX SERVER
+		// MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
+		// MBeanContainer mBeanContainer = new MBeanContainer(mBeanServer);
+		// server.getContainer().addEventListener(mBeanContainer);
+		// mBeanContainer.start();
+		
+		server.addHandler(bb);
+
+		try {
+			System.out.println(">>> STARTING EMBEDDED JETTY SERVER, PRESS ANY KEY TO STOP");
+			server.start();
+			while (System.in.available() == 0) {
+				Thread.sleep(5000);
+			}
+			server.stop();
+			server.join();
+		} catch (Exception e) {
+			e.printStackTrace();
+			System.exit(100);
+		}
+	}
+}
Index: src/main/java/demo/address.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/address.js	(revision )
+++ src/main/java/demo/address.js	(revision )
@@ -0,0 +1,177 @@
+/**
+ * requires.... 
+ *  <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script> 
+ */
+
+
+// NOTE : where should i package this???
+var easy = easy ? easy : {};
+easy.address = (function() {
+
+    var create = function(options) {
+        var widget = autoCompleteAddress(options);
+        $(options.id).data('address',widget);
+        return widget;
+    }
+
+
+    function autoCompleteAddress(opts) {
+        var defaults = {
+            // any default options like country, city, etc... pass 'em here.
+        };
+        var options = $.extend(defaults, opts);
+        var $address = $(options.id);
+        var $text = $address.find('.txt');
+        var $lat = $address.children('.lat');
+        var $lng = $address.children('.lng');
+        var $street_address = $address.children('.street-address');
+        var $city = $address.children('.city');
+        var $country = $address.children('.country');
+        var $postalCode = $address.children('.postal-code');
+        var $state = $address.children('.state');
+        var currentInput;
+
+        function getAddresses(request, response) {
+            new google.maps.Geocoder().geocode({'address': request.term, region:'CA' }, function(results, status) {
+                if (status == google.maps.GeocoderStatus.OK) {
+                    if (results.length == 0) {
+                        response($.map(results, function(value, i) {
+                            return value.formatted_address;
+                        }));
+                    } else if (results.length > 1) {
+                        if (options.latitude&&options.longitude) {
+                            results = results.sort(function(a,b) {return delta(a,b)})
+                        }
+                        response(results);
+                    }
+                    else {
+                        response(results);
+                    }
+                } else {
+                    response([]);
+                }
+            });
+
+        };
+
+        function extractFromGeoCode(components, type) {
+            for (var i = 0; i < components.length; i++) {
+                for (var j = 0; j < components[i].types.length; j++) {
+                    if (components[i].types[j] == type)
+                        return components[i].long_name;
+                }
+            }
+            return "";
+        }
+
+        function updateNonAddress(textInput) {
+            update(textInput);
+        }
+
+        function toRad(x) {
+            return x * Math.PI / 180;
+        }
+
+        function delta(a,b) {
+            a.distance = a.distance ? a.distance : distance(a);
+            b.distance = b.distance ? b.distance : distance(b);
+            return a.distance-b.distance;
+        }
+
+        function distance(pt) {
+            if (!options.latitude || !options.longitude) {
+                throw('you need to specify location bias');
+            }
+            var lat1 = pt.geometry.location.lat();
+            var lng1 = pt.geometry.location.lng();
+            var lat2 = options.latitude;
+            var lng2 = options.longitude;
+
+            var R = 6371; // km
+            var x1 = lat2-lat1;
+            var dLat = toRad(x1);
+            var x2 = lng2-lng1;
+            var dLon = toRad(x2);
+            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
+                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
+                    Math.sin(dLon/2) * Math.sin(dLon/2);
+            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
+            var d = R * c;
+            console.log('dist ' + lat1 + ' , ' + lng1 + ' = ' + d);
+            return d;
+        }
+
+        function updateAddress(item) {
+            update(item.formatted_address, item.geometry.location, item.address_components);
+        }
+
+        function update(formattedAddress, latLng, addressInfo) {
+            $text.val(formattedAddress);
+            if (latLng) {
+                $lat.val(latLng.lat());
+                $lng.val(latLng.lng());
+            } else { 
+                $lat.val(null);
+                $lng.val(null);
+            }
+
+            if (addressInfo) {
+                $street_address.val(extractFromGeoCode(addressInfo, 'street_number') + ' ' + extractFromGeoCode(addressInfo, 'route'));
+                $city.val(extractFromGeoCode(addressInfo, 'locality'));
+                $country.val(extractFromGeoCode(addressInfo, 'country'));
+                $postalCode.val(extractFromGeoCode(addressInfo, 'postal_code'));
+                $state.val(extractFromGeoCode(addressInfo, 'administrative_area_level_1'));
+            } else {
+                $street_address.val(null);
+                $city.val(null);
+                $country.val(null);
+                $postalCode.val(null);
+                $state.val(null);
+            }
+
+            currentInput = $text.val();
+        }
+
+        var textOptions = {
+            delay: 500,
+            minLength: 1,
+            source: function(request, response) {
+                getAddresses(request, response);
+            },
+            select: function(event, ui) {
+                updateAddress(ui.item);
+                return false;
+            },
+            change: function(a, b) {
+                // address is NOT a selected value, just some random input so we'll remove any gps, postal code, country etc... values.
+                if (currentInput != $text.val()) {
+                    updateNonAddress($text.val());
+                }
+                return false;
+            }
+        };
+
+        if ($text.size() > 0) {
+            $text.autocomplete(textOptions).data('ui-autocomplete')._renderItem = function(ul, item) {
+                    return $("<li></li>")
+                            .data("item.autocomplete", item)
+                            .append("<a>" + item.formatted_address + "</a>")
+                            .appendTo(ul);
+                };
+        }
+
+        return {
+            // no exposed API for autoComplete widget yet.
+        };
+
+    }
+
+    return {
+        create: create
+    };
+
+})();
+
+
+
+
Index: src/main/java/demo/easyTabbedPanel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/easyTabbedPanel.js	(revision )
+++ src/main/java/demo/easyTabbedPanel.js	(revision )
@@ -0,0 +1,103 @@
+var colors = ["red", "blue", "green", "yellow", "brown", "black"];
+
+var easy = easy ? easy : {};
+
+
+
+easy.tabPanel = (function() {
+
+    var defaultOptions = {
+        header : {
+            minWidth : '7em',
+            paddingRight: '50px',
+            maxWidth : '110em'
+        }
+    };
+
+    var init = function(options) {
+        $('#'+options.id).tabPanel = tabPanel($.extend(defaultOptions,options));
+    }
+
+    var expandAll = function() {
+        $('.tab-panel-content').slideDown(100);
+    }
+
+    var collapseAll = function() {
+        $('.tab-panel-content').slideUp(100);
+    }
+
+
+
+    function tabPanel(options) {
+        var id = options.id;
+        var $tabPanel = $('#'+id);
+        var options = options;
+        var current = options.current;
+        var $panels = $('#'+options.id + ' .tab-panels');
+        var $header = $tabPanel.find('.tab-header');
+
+
+        function layout() {
+            var $tabList = $tabPanel.find('ul');
+
+            var width = $tabPanel.find('.tab-row').width() - $header.width() - 32;  // - size of status icon at end?
+            var $tabs = $tabPanel.find('ul li');
+            // how many tabs...how much room for each??
+            var tabCount  = $tabs.length;
+            var size = Math.floor(width/(tabCount+1))+'px';
+            $tabs.css({minWidth:size,maxWidth:size});
+            // TODO : if > maxTabs, throw the excess in another <ul class="extra-tabs"><li>blah</li></ul>
+            // have minTazbWidth option.
+            $tabPanel.find('.tab-header').css(options.header);
+        }
+
+        if (options.collapsed) {
+            $panels.hide();
+        }
+
+        // need to deal with state of icon here.  triangle down/right etc...
+        $header.click(function(e) {
+            $panels.slideToggle(100);
+        });
+
+        var selectTab = function(index) {
+            // deselect current...
+            $tabPanel.find('li.current').removeClass('current');
+            $tabPanel.find('.tab-content.current').removeClass('current');
+            // ...select new one.
+            $tabPanel.find(' ul li').eq(index).addClass('current');
+            $tabPanel.find(' .tab-content').eq(index).addClass('current');
+        }
+
+        var selectLastTab = function() {
+            selectTab($tabPanel.find('ul li').length-1);
+        };
+
+        var selectFirstTab = function() {
+            selectTab(0);
+        };
+
+        layout();
+
+        selectTab(options.current);
+
+        $tabPanel.find(' ul li').click(function(e) {
+            selectTab($(this).index())
+        });
+
+        return {
+            selectFirstTab : selectFirstTab,
+            selectLastTab: selectLastTab
+        }
+
+    }
+
+    return {
+        init : init,
+        expandAll : expandAll,
+        collapseAll : collapseAll
+    }
+
+
+
+})();
Index: src/main/java/demo/HomePage.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/HomePage.html	(revision )
+++ src/main/java/demo/HomePage.html	(revision )
@@ -0,0 +1,123 @@
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta http-equiv="X-UA-Compatible" content="IE=edge">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <meta name="description" content="">
+    <meta name="author" content="">
+    <link rel="shortcut icon" href="../../assets/ico/favicon.ico">
+    <link href="//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
+
+    <title>Brovada Demo</title>
+
+
+    <style id="clearly_highlighting_css" type="text/css">
+        html.clearly_highlighting_enabled ::-moz-selection { background: rgba(246, 238, 150, 0.99); }
+        html.clearly_highlighting_enabled ::selection { background: rgba(246, 238, 150, 0.99); }
+        html.clearly_highlighting_enabled { cursor: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--cursor.png") 14 16, text; } /* highlight tag */ em.clearly_highlight_element {    font-style: inherit !important; font-weight: inherit !important;    background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--yellow.png");    background-repeat: repeat-x; background-position: top left; background-size: 100% 100%; } /* the delete-buttons are positioned relative to this */ em.clearly_highlight_element.clearly_highlight_first { position: relative; } /* delete buttons */ em.clearly_highlight_element a.clearly_highlight_delete_element {    display: none; cursor: pointer;    padding: 0; margin: 0; line-height: 0;    position: absolute; width: 34px; height: 34px; left: -17px; top: -17px;    background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--delete-sprite.png"); background-repeat: no-repeat; background-position: 0px 0px; } em.clearly_highlight_element a.clearly_highlight_delete_element:hover { background-position: -34px 0px; } /* retina */ @media (min--moz-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) {    em.clearly_highlight_element { background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--yellow@2x.png"); }    em.clearly_highlight_element a.clearly_highlight_delete_element { background-image: url("chrome-extension://pioclpoplcdbaefihamjohnefbikjilc/clearly/images/highlight--delete-sprite@2x.png"); background-size: 68px 34px; } } </style><style type="text/css"></style><style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }
+    </style>
+
+
+
+</head>
+
+<body>
+
+
+
+
+
+<!-- Fixed navbar -->
+<div class="navbar navbar-default navbar-fixed-top" role="navigation">
+    <div class="container">
+        <div class="navbar-header">
+            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
+                <span class="sr-only">Toggle navigation</span>
+                <span class="icon-bar"></span>
+                <span class="icon-bar"></span>
+                <span class="icon-bar"></span>
+            </button>
+            <a class="navbar-brand" href="#">Brovada One</a>
+        </div>
+        <div class="navbar-collapse collapse">
+            <ul class="nav navbar-nav">
+                <li class="active"><a href="#">Auto</a></li>
+                <li><a href="#about">Residential</a></li>
+                <li><a href="#contact">Commercial</a></li>
+            </ul>
+            <ul class="nav navbar-nav navbar-right">
+                <li class="dropdown">
+                    <a href="#" class="dropdown-toggle" data-toggle="dropdown">Transactions <b class="caret"></b></a>
+                    <ul class="dropdown-menu">
+                        <li><a href="#">Create a new policy</a></li>
+                        <li><a href="#">Inquire about a policy</a></li>
+                        <li><a href="#">Modify a policy</a></li>
+                        <li class="divider"></li>
+                        <li class="dropdown-header">Carrier Specific</li>
+                        <li><a href="#">FooBar</a></li>
+                        <li><a href="#">Update my info</a></li>
+                    </ul>
+                </li><li><a>Portals</a></li>
+                <li><a>Account</a></li>
+                <li class="active"><a>Support</a></li>
+            </ul>
+        </div><!--/.nav-collapse -->
+    </div>
+</div>
+
+
+<main class="container">
+
+    <form wicket:id="form" role="form">
+        <span wicket:id="tabs"></span>
+    </form>
+
+    <wicket:fragment wicket:id="panelFragment">
+        <div class="form-group">
+            <label wicket:id="label">Your Name</label>
+            <input wicket:id="text" type="text" class="form-control" placeholder="Enter Name" required>
+        </div>
+        <div class="form-group">
+            <label>Your Email</label>
+            <input type="email" class="form-control" placeholder="Enter Email" required  >
+        </div>
+        <div class="form-group">
+            <label>Address</label>
+            <div wicket:id="address"/>
+        </div>
+    </wicket:fragment>
+</main> <!-- /container -->
+
+<!--
+<div class="container">
+
+
+   <p>
+            <a class="btn btn-lg btn-primary" role="button">Issue</a>
+            <a class="btn btn-lg btn-default" role="button">Cancel</a>
+        </p>
+
+    <div class="jumbotron">
+        <h1>Navbar example</h1>
+        <p>This example is a quick exercise to illustrate how the default, static and fixed to top navbar work. It includes the responsive CSS and HTML, so it also adapts to your viewport and device.</p>
+        <p>To see the difference between static and fixed top navbars, just scroll.</p>
+        <p>
+            <a class="btn btn-lg btn-primary" href="../../components/#navbar" role="button">View navbar docs »</a>
+        </p>
+    </div>
+
+</div>
+-->
+
+</body></html>
+
+
+
+
+
+
+
+
+
+
+
Index: src/main/java/demo/EasyAddress.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/EasyAddress.html	(revision )
+++ src/main/java/demo/EasyAddress.html	(revision )
@@ -0,0 +1,12 @@
+<wicket:panel>
+    <wicket:enclosure child="text">
+        <input type="text" wicket:id="text" class="txt form-control"/>
+        <input wicket:id="latitude" class="lat" type="hidden"/>
+        <input wicket:id="longitude" class="lng" type="hidden"/>
+        <input wicket:id="street_address" class="street-address" type="hidden"/>
+        <input wicket:id="locality" class="city" type="hidden"/>
+        <input wicket:id="administrative_area_level_1" class="state" type="hidden"/>
+        <input wicket:id="country" class="country" type="hidden"/>
+        <input wicket:id="postal_code" class="postal-code" type="hidden"/>
+    </wicket:enclosure>
+</wicket:panel>
Index: src/main/java/demo/GpsLocation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/GpsLocation.java	(revision )
+++ src/main/java/demo/GpsLocation.java	(revision )
@@ -0,0 +1,50 @@
+
+package demo;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+
+/**
+ * @author derek.dick
+ */
+public class GpsLocation implements Serializable {
+    
+    private BigDecimal latitude;
+    private BigDecimal longitude;
+
+    public GpsLocation(BigDecimal latitude, BigDecimal longitude) {
+        this.latitude = latitude;
+        this.longitude = longitude;
+    }
+
+    public GpsLocation(Number latitude, Number longitude) {
+        this.latitude = new BigDecimal(latitude.doubleValue());
+        this.longitude = new BigDecimal(longitude.doubleValue());
+    }
+
+    public boolean isNear(GpsLocation location) {
+        return false;   //TODO
+    }
+    
+    public boolean isNear(GpsLocation location, Number threshold) {
+        return false; //TODO
+    }          
+    
+    public Double distanceFrom(GpsLocation location) {                                                                                                                                                                                                                                                               
+        // do the haversine calculation stuff here...
+        return 0.0;
+    }
+
+    public boolean isEmpty() {
+        return latitude==null || longitude==null;
+    }
+
+    public BigDecimal getLatitude() {
+        return latitude;
+    }
+
+    public BigDecimal getLongitude() {
+        return longitude;
+    }
+    
+}
Index: src/main/java/demo/EasyTabbedPanel.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/demo/EasyTabbedPanel.html	(revision )
+++ src/main/java/demo/EasyTabbedPanel.html	(revision )
@@ -0,0 +1,20 @@
+
+
+<wicket:panel xmlns:wicket="http://wicket.apache.org">
+    <div wicket:id="tabsContainer" class="tab-row">
+        <span class="tab-header"><span wicket:id="header"/><p>:</p></span>
+        <ul class="tab-list">
+            <li wicket:id="tabs">
+                <a wicket:id="link" href="#" class="tab-name"><span wicket:id="title"/></a>
+                <div class="tab-x"><a wicket:id="delete" href="#"><i class="fa fa-times"/></a></div>
+            </li>
+        </ul>
+        <div wicket:id="add" class="tab-add "><i class="fa fa-plus-circle"/></div>
+    </div>
+    <div wicket:id="panelContainer" class="tab-panels">
+        <div wicket:id="panels">
+            <div wicket:id="panel" class="tab-content"><!-- hidden by default...only selected one shown --></div>
+        </div>
+        <div wicket:id="blankSlate" class="tab-content blank-slate"/>
+    </div>
+</wicket:panel>
